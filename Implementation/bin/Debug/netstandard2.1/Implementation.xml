<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Implementation</name>
    </assembly>
    <members>
        <member name="T:Implementation.EService">
            <summary>
            服务类型
            </summary>
        </member>
        <member name="F:Implementation.EService.AddTransient">
            <summary>
            临时服务
            </summary>
        </member>
        <member name="F:Implementation.EService.AddScoped">
            <summary>
            分区服务
            </summary>
        </member>
        <member name="F:Implementation.EService.AddSingleton">
            <summary>
            单例服务
            </summary>
        </member>
        <member name="T:Implementation.DBServiceProvider`2">
            <summary> 服务容器&#60;服务,上下文&#62;
            <br/>服务：继承自类
            <br/>上下文：继承自DbContext预定义类型
            </summary>
            <typeparam name="TService">服务，继承类</typeparam>
            <typeparam name="TContext">上下文，继承DbContext预定义类型</typeparam>
        </member>
        <member name="M:Implementation.DBServiceProvider`2.GetDbServiceProvider(Implementation.EService,System.String)">
            <summary>根据服务类型，获取相对应的服务
            </summary>
            <param name="serviceType">服务类型</param>
            <param name="sqlString"> 数据库连接字符串</param>
            <returns>服务提供的容器</returns>
        </member>
        <member name="T:Implementation.ServiceContainer">
            <summary>
            服务容器
            </summary>
        </member>
        <member name="F:Implementation.ServiceContainer.MyLoggerFactory">
            <summary>
            logging  to  console
            </summary>
            <returns>ILoggerFactory</returns>
        </member>
        <member name="M:Implementation.ServiceContainer.GetDbSigleTableService``3(Implementation.EService,System.String)">
            <summary> 获取单表服务容器（带ModelBuider）</summary>
            <param name="service">服务类型</param>
            <param name="sqlString">连接服务器数据库连接字符串</param>
            <typeparam name="TService">服务类</typeparam>
            <typeparam name="TTable">数据表类</typeparam>
            <typeparam name="TModelBuilder">模型类</typeparam>
            <returns>服务的容器</returns>
        </member>
        <member name="M:Implementation.ServiceContainer.GetDbSigleTableService``2(Implementation.EService,System.String)">
            <summary> 获取单表服务容器（不带ModelBuider） </summary>
            <param name="service">服务类型</param>
            <param name="sqlString">连接服务器数据库连接字符串</param>
            <typeparam name="TService">服务类</typeparam>
            <typeparam name="TTable">数据表类</typeparam>
            <returns>服务的容器</returns>
        </member>
        <member name="M:Implementation.ServiceContainer.GetDbMultiTablesService``5(Implementation.EService,System.String)">
            <summary> 获取多表服务容器（带ModelBuider）</summary>
            <param name="service">服务类型</param>
            <param name="sqlString">连接服务器数据库连接字符串</param>
            <typeparam name="TService">服务类</typeparam>
            <typeparam name="TTable">数据表类</typeparam>
            <typeparam name="TModelBuilder">模型类</typeparam>
            <returns>服务的容器</returns>
        </member>
        <member name="M:Implementation.ServiceContainer.GetDbMultiTablesService``3(Implementation.EService,System.String)">
            <summary> 获取多表服务容器（不带ModelBuider） </summary>
            <param name="service">服务类型</param>
            <param name="sqlString">连接服务器数据库连接字符串</param>
            <typeparam name="TService">服务类</typeparam>
            <typeparam name="TTable">数据表类</typeparam>
            <returns>服务的容器</returns>
        </member>
        <member name="T:Implementation.c">
            <summary>
            模型表
            </summary>
        </member>
        <member name="T:Implementation.b">
            <summary>
            模型biulder，添加字段等
            </summary>
        </member>
        <member name="T:Implementation.DBS">
            <summary>
            添加模型参数
            </summary>
        </member>
        <member name="T:Implementation.DBService`1">
            <summary> 用户服务基类，在使用服务容器时必须继承此类
            <br/>TContext为继承DBContext泛型基类的派生类
            <br/>作用：
            <br/>添加服务方法和服务功能
            </summary>
            <typeparam name="TContext">上下文</typeparam>
        </member>
        <member name="F:Implementation.DBService`1.context">
            <summary>
            服务上下文context
            </summary>
        </member>
        <member name="T:Implementation.DBContext`2">
            <summary> 【单表】上下文基类，用于加载配置数据表和数据表字段属性
            <br/>DBContext&#60;TDbTable, TModelsBuilder&#62;
            <br/>DBContext：继承自DbContext预定义类型
            <br/>TModelsBuilder：继承自接口IEntityTypeConfiguration&#60;T&#62;
            <br/>(其中接口IEntityTypeConfiguration&#60;T&#62;需要：
            <br/>using Microsoft.EntityFrameworkCore;
            <br/>using Microsoft.EntityFrameworkCore.Metadata.Builders;)
            </summary>
            <typeparam name="TDbTable">数据表模型类</typeparam>
            <typeparam name="TModelsBuilder">配置加载数据模型属性 
            <br/><i>继承自接口IEntityTypeConfiguration&#60;TDbTable&#62;</i>
            </typeparam>
        </member>
        <member name="P:Implementation.DBContext`2.Table">
            <summary>
            控制的表
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="M:Implementation.DBContext`2.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:Implementation.DBContext`2.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            流利api可以配置加载属性，通过ModelBuilder添加属性
            </summary>
            <param name="builder">添加模型属性配置</param>
        </member>
        <member name="T:Implementation.DBContext`1">
            <summary> 上下文基类，用于加载配置数据表和数据表字段属性
            <br/>DBContext：继承自DbContext预定义类型
            <br/>TDbTable：模型表类
            <br/>继承并重写OnModelCreating(ModelBuilder builder)方法，设置flexibility api配置TDTable的属性
            </summary>
            <typeparam name="TDbTable">数据表模型类</typeparam>
        </member>
        <member name="P:Implementation.DBContext`1.Table">
            <summary>
            控制的表
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="M:Implementation.DBContext`1.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:Implementation.DBContext`1.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            流利api可以配置加载属性，通过ModelBuilder添加属性
            </summary>
            <param name="builder">添加模型属性配置</param>
        </member>
        <member name="T:Implementation.DBContexts`2">
            <summary> 上下文基类，用于加载配置数据表和数据表字段属性
            <br/>DBContext：继承自DbContext预定义类型
            <br/>TDbTable：模型表类
            <br/>可继承并重写OnModelCreating(ModelBuilder builder)方法，设置flexibility api配置TDTable的属性
            </summary>
            <typeparam name="TDbTable1">数据表模型类1</typeparam>
            <typeparam name="TDbTable2">数据表模型类2</typeparam>
        </member>
        <member name="P:Implementation.DBContexts`2.Table1">
            <summary>
            控制的表,对应泛型的第一个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContexts`2.Table2">
            <summary>
            控制的表，对应泛型的第二个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="M:Implementation.DBContexts`2.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:Implementation.DBContexts`2.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            流利api可以配置加载属性，通过ModelBuilder添加属性
            </summary>
            <param name="builder">添加模型属性配置</param>
        </member>
        <member name="T:Implementation.DBContexts`3">
            <summary> 上下文基类，用于加载配置数据表和数据表字段属性
            <br/>DBContext：继承自DbContext预定义类型
            <br/>TDbTable：模型表类
            <br/>可继承并重写OnModelCreating(ModelBuilder builder)方法，设置flexibility api配置TDTable的属性
            </summary>
            <typeparam name="TDbTable1">数据表模型类1</typeparam>
            <typeparam name="TDbTable2">数据表模型类2</typeparam>
            <typeparam name="TDbTable3">数据表模型类3</typeparam>
        </member>
        <member name="P:Implementation.DBContexts`3.Table1">
            <summary>
            控制的表,对应泛型的第一个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContexts`3.Table2">
            <summary>
            控制的表，对应泛型的第二个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContexts`3.Table3">
            <summary>
            控制的表，对应泛型的第二个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="M:Implementation.DBContexts`3.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:Implementation.DBContexts`3.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            流利api可以配置加载属性，通过ModelBuilder添加属性
            </summary>
            <param name="builder">添加模型属性配置</param>
        </member>
        <member name="T:Implementation.DBContexts`4">
            <summary> 上下文基类，用于加载配置数据表和数据表字段属性
            <br/>DBContext：继承自DbContext预定义类型
            <br/>TDbTable：模型表类
            <br/>可继承并重写OnModelCreating(ModelBuilder builder)方法，设置flexibility api配置TDTable的属性
            </summary>
            <typeparam name="TDbTable1">数据表模型类1</typeparam>
            <typeparam name="TDbTable2">数据表模型类2</typeparam>
            <typeparam name="TDbTable3">数据表模型类3</typeparam>
            <typeparam name="TDbTable3">数据表模型类4</typeparam>
        </member>
        <member name="P:Implementation.DBContexts`4.Table1">
            <summary>
            控制的表,对应泛型的第1个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContexts`4.Table2">
            <summary>
            控制的表，对应泛型的第2个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContexts`4.Table3">
            <summary>
            控制的表，对应泛型的第3个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContexts`4.Table4">
            <summary>
            控制的表，对应泛型的第4个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="M:Implementation.DBContexts`4.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:Implementation.DBContexts`4.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            流利api可以配置加载属性，通过ModelBuilder添加属性
            </summary>
            <param name="builder">添加模型属性配置</param>
        </member>
        <member name="T:Implementation.DBContextsWithModelsBuilder`5">
            <summary> 上下文基类，用于加载配置数据表和数据表字段属性
            <br/>DBContext：继承自DbContext预定义类型
            <br/>TDbTable：模型表类
            <br/>可继承并重写OnModelCreating(ModelBuilder builder)方法，设置flexibility api配置TDTable的属性
            </summary>
            <typeparam name="TDbTable1">数据表模型类1</typeparam>
            <typeparam name="TDbTable2">数据表模型类2</typeparam>
            <typeparam name="TDbTable3">数据表模型类3</typeparam>
            <typeparam name="TDbTable3">数据表模型类4</typeparam>
            <typeparam name="TDbTable3">数据表模型类5</typeparam>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`5.Table1">
            <summary>
            控制的表,对应泛型的第1个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`5.Table2">
            <summary>
            控制的表，对应泛型的第2个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`5.Table3">
            <summary>
            控制的表，对应泛型的第3个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`5.Table4">
            <summary>
            控制的表，对应泛型的第4个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`5.Table5">
            <summary>
            控制的表，对应泛型的第5个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="M:Implementation.DBContextsWithModelsBuilder`5.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:Implementation.DBContextsWithModelsBuilder`5.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            流利api可以配置加载属性，通过ModelBuilder添加属性
            </summary>
            <param name="builder">添加模型属性配置</param>
        </member>
        <member name="T:Implementation.DBContextsWithModelsBuilder`4">
            <summary> 【多表】上下文基类，用于加载配置数据表和数据表字段属性
            <br/>DBContext&#60;TDbTable1, TDbTable2, TModelsBuilder1, TModelsBuilder2&#62;
            <br/>DBContext：继承自DbContext预定义类型
            <br/>TModelsBuilder：继承自接口IEntityTypeConfiguration&#60;T&#62;
            <br/>(其中接口IEntityTypeConfiguration&#60;T&#62;需要：
            <br/>using Microsoft.EntityFrameworkCore;
            <br/>using Microsoft.EntityFrameworkCore.Metadata.Builders;)
            </summary>
            <typeparam name="TDbTable1">数据表模型类1</typeparam>
            <typeparam name="TDbTable2">数据表模型类2</typeparam>
            <typeparam name="TModelsBuilder">配置加载数据模型属性 
            <br/><i>继承自接口IEntityTypeConfiguration&#60;TDbTable&#62;</i>
            </typeparam>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`4.Table1">
            <summary>
            控制的表,对应泛型的第一个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`4.Table2">
            <summary>
            控制的表，对应泛型的第二个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="M:Implementation.DBContextsWithModelsBuilder`4.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:Implementation.DBContextsWithModelsBuilder`4.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            流利api可以配置加载属性，通过ModelBuilder添加属性
            </summary>
            <param name="builder">添加模型属性配置</param>
        </member>
        <member name="T:Implementation.DBContextsWithModelsBuilder`6">
            <summary> 【多表】上下文基类，用于加载配置数据表和数据表字段属性
            <br/>DBContext&#60;TDbTable1, TDbTable2, TModelsBuilder1, TModelsBuilder2&#62;
            <br/>DBContext：继承自DbContext预定义类型
            <br/>TModelsBuilder：继承自接口IEntityTypeConfiguration&#60;T&#62;
            <br/>(其中接口IEntityTypeConfiguration&#60;T&#62;需要：
            <br/>using Microsoft.EntityFrameworkCore;
            <br/>using Microsoft.EntityFrameworkCore.Metadata.Builders;)
            </summary>
            <typeparam name="TDbTable1">数据表模型类1</typeparam>
            <typeparam name="TDbTable2">数据表模型类2</typeparam>
            <typeparam name="TModelsBuilder">配置加载数据模型属性 
            <br/><i>继承自接口IEntityTypeConfiguration&#60;TDbTable&#62;</i>
            </typeparam>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`6.Table1">
            <summary>
            控制的表,对应泛型的第1个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`6.Table2">
            <summary>
            控制的表，对应泛型的第2个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`6.Table3">
            <summary>
            控制的表，对应泛型的第3个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="M:Implementation.DBContextsWithModelsBuilder`6.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:Implementation.DBContextsWithModelsBuilder`6.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            流利api可以配置加载属性，通过ModelBuilder添加属性
            </summary>
            <param name="builder">添加模型属性配置</param>
        </member>
        <member name="T:Implementation.DBContextsWithModelsBuilder`8">
            <summary> 【多表】上下文基类，用于加载配置数据表和数据表字段属性
            <br/>DBContext：继承自DbContext预定义类型
            <br/>TModelsBuilder：继承自接口IEntityTypeConfiguration&#60;T&#62;
            <br/>(其中接口IEntityTypeConfiguration&#60;T&#62;需要：
            <br/>using Microsoft.EntityFrameworkCore;
            <br/>using Microsoft.EntityFrameworkCore.Metadata.Builders;)
            </summary>
            <typeparam name="TDbTable1">数据表模型类1</typeparam>
            <typeparam name="TDbTable2">数据表模型类2</typeparam>
            <typeparam name="TModelsBuilder">配置加载数据模型属性 
            <br/><i>继承自接口IEntityTypeConfiguration&#60;TDbTable&#62;</i>
            </typeparam>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`8.Table1">
            <summary>
            控制的表,对应泛型的第1个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`8.Table2">
            <summary>
            控制的表，对应泛型的第2个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`8.Table3">
            <summary>
            控制的表，对应泛型的第3个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`8.Table4">
            <summary>
            控制的表，对应泛型的第4个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="M:Implementation.DBContextsWithModelsBuilder`8.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:Implementation.DBContextsWithModelsBuilder`8.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            流利api可以配置加载属性，通过ModelBuilder添加属性
            </summary>
            <param name="builder">添加模型属性配置</param>
        </member>
        <member name="T:Implementation.DBContextsWithModelsBuilder`10">
            <summary> 【多表】上下文基类，用于加载配置数据表和数据表字段属性
            <br/>DBContext：继承自DbContext预定义类型
            <br/>TModelsBuilder：继承自接口IEntityTypeConfiguration&#60;T&#62;
            <br/>(其中接口IEntityTypeConfiguration&#60;T&#62;需要：
            <br/>using Microsoft.EntityFrameworkCore;
            <br/>using Microsoft.EntityFrameworkCore.Metadata.Builders;)
            </summary>
            <typeparam name="TDbTable1">数据表模型类1</typeparam>
            <typeparam name="TDbTable2">数据表模型类2</typeparam>
            <typeparam name="TDbTable3">数据表模型类3</typeparam>
            <typeparam name="TDbTable4">数据表模型类4</typeparam>
            <typeparam name="TDbTable5">数据表模型类5</typeparam>
            <typeparam name="TModelsBuilder1">配置加载数据模型属性 
            <br/><i>继承自接口IEntityTypeConfiguration&#60;TDbTable&#62;</i>
            </typeparam>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`10.Table1">
            <summary>
            控制的表,对应泛型的第1个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`10.Table2">
            <summary>
            控制的表，对应泛型的第2个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`10.Table3">
            <summary>
            控制的表，对应泛型的第3个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`10.Table4">
            <summary>
            控制的表，对应泛型的第4个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="P:Implementation.DBContextsWithModelsBuilder`10.Table5">
            <summary>
            控制的表，对应泛型的第5个类型
            </summary>
            <value>所有表的属性值及方法</value>
        </member>
        <member name="M:Implementation.DBContextsWithModelsBuilder`10.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            
            </summary>
            <param name="optionsBuilder"></param>
        </member>
        <member name="M:Implementation.DBContextsWithModelsBuilder`10.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            流利api可以配置加载属性，通过ModelBuilder添加属性
            </summary>
            <param name="builder">添加模型属性配置</param>
        </member>
        <member name="T:Implementation.Tables.MainViews.User.ModelsBuilder.UserProfile">
            <summary>
            添加所有模型属性，阴影属性等
            </summary>
        </member>
        <member name="T:Implementation.Tables.MainViews.User.UserContext">
            <summary>
            添加上下文配置(使用ModelBuilder，则无需添加任何内容，请使用UserModelBuilder进行属性配置)
            </summary>
        </member>
        <member name="T:Implementation.Tables.MainViews.User.UserService">
            <summary>
            添加所有服务方法
            </summary>
        </member>
    </members>
</doc>
